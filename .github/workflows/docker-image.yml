name: Docker Image CI

# 触发条件
on:
  workflow_dispatch:
        
env:
  REGISTRY: ghcr.io
  IMAGE: d9lab/zhenxun_bot
  REGISTRY2: docker.io
  IMAGE2: d9lab01/zhenxun_bot
  
jobs:
  build:
    name: Push Docker image
    runs-on: ubuntu-latest
    
    permissions:
      packages: write
      contents: read
      
    steps:
    - uses: actions/checkout@v3
    - name: Build the Docker image
      run: |
        sudo timedatectl set-timezone "Asia/Shanghai"
        sudo apt-get update
        sudo apt-get install --no-install-recommends git wget ca-certificates -y
        sudo git clone --depth=1 https://github.com/HibiKier/zhenxun_bot.git $(pwd)/botfile
        sudo rm -rf $(pwd)/botfile/.git
        sudo tar -zcf bot.tar.gz -C botfile .
        sudo rm -rf botfile
        sudo chmod 755 zx-cli
        sudo ls -la --color
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
        
    # 登录 ghcr.io
    - name: Login ghcr.io
      uses: docker/login-action@v2
      with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
    - name: Login DockerHub
      uses: docker/login-action@v2
      with:
          registry: ${{ env.REGISTRY2 }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          
    # 镜像元数据操作
    - name: Docker Metadata action
      id: meta
      uses: docker/metadata-action@v4
      with:
        labels: |
          MAINTAINER=Disappear9
          org.opencontainers.image.title=zhenxun_bot
          org.opencontainers.image.description=基于 Nonebot2 和 go-cqhttp 开发，以 postgresql 作为数据库，非常可爱的绪山真寻bot。
          org.opencontainers.image.url=https://github.com/D9Lab/zhenxun_bot_docker
          org.opencontainers.image.source=https://github.com/HibiKier/zhenxun_bot
        tags: |
          type=raw,value=latest,enable={{is_default_branch}}
        images: |
          ${{ env.REGISTRY }}/${{ env.IMAGE }}
          ${{ env.REGISTRY2 }}/${{ env.IMAGE2 }}
    
    # 构建 并 推送镜像
    - name: build and push docker image
      uses: docker/build-push-action@v3
      with:
        platforms: linux/amd64
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha,scope=${{ github.workflow }}
        cache-to: type=gha,mode=max,scope=${{ github.workflow }}
